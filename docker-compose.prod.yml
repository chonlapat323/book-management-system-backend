version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: book_management_api
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=3001
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    ports:
      - "3001:3001"
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.paodev.xyz`)
      - traefik.http.routers.api.entrypoints=http,https
      - traefik.http.services.api.loadbalancer.server.port=3001
      - traefik.http.routers.api.tls.certresolver=letsencrypt
    networks:
      - book_management_network
      - coolify
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: book_management_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - book_management_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: book_management_pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    labels:
      - traefik.enable=true
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.paodev.xyz`)
      - traefik.http.routers.pgadmin.entrypoints=http,https
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
      - traefik.http.routers.pgadmin.tls.certresolver=letsencrypt
    networks:
      - book_management_network
      - coolify
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local

networks:
  book_management_network:
    driver: bridge
  coolify:
    external: true